21. Merge Two Sorted Lists
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = []
Output: []

Example 3:
Input: list1 = [], list2 = [0]
Output: [0]



Solution ----------------------------->>>>>>>>>>>>>



# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        if list1 is None and list2 is None:
            return None
        if list1 is None:
            return list2
        if list2 is None:
            return list1
        l1=list1
        l2=list2
        head=None
        tail=None
        while l1!=None and l2!=None:
            if l1.val<=l2.val :
                if head is None:
                    head=ListNode(l1.val)
                    l1=l1.next
                    tail=head
                else:
                    tail.next=ListNode(l1.val)
                    l1=l1.next
                    tail=tail.next
            else:
                if head is None:
                    head=ListNode(l2.val)
                    l2=l2.next
                    tail=head
                else:
                    tail.next=ListNode(l2.val)
                    l2=l2.next
                    tail=tail.next
                
        while l1!=None:
            tail.next=ListNode(l1.val)
            l1=l1.next
            tail=tail.next
        while l2!=None:
            tail.next=ListNode(l2.val)
            l2=l2.next
            tail=tail.next
        return head
        
